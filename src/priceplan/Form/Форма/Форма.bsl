
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаС		= НачалоМесяца(ТекущаяДата());
	Объект.ДатаПо		= КонецМесяца(ТекущаяДата());
	//Объект.Сервер		= "cust1.priceplan.ru:7889";
	
	ТекстЗапроса		=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Запрос				= Новый Запрос;
	Запрос.Текст		= ТекстЗапроса;
	Выборка				= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Организация	= Выборка.Ссылка;
	КонецЕсли;	
	
	Объект.Сервер		= ХранилищеОбщихНастроек.Загрузить("ИмяСервера_ЗагрузкаДокументов", "ЗагрузкаДокументов");
	Объект.Пароль	= ХранилищеОбщихНастроек.Загрузить("Пользователь_ЗагрузкаДокументов", "ЗагрузкаДокументов");
	Объект.Ключ			= ХранилищеОбщихНастроек.Загрузить("ИмяСервера_Ключ", "ЗагрузкаДокументов");
	Объект.ШагЧтенияДанных= ХранилищеОбщихНастроек.Загрузить("ИмяСервера_ШагЧтения", "ЗагрузкаДокументов");
	
	Если НЕ ЗначениеЗаполнено(Объект.ШагЧтенияДанных)  Тогда
		Объект.ШагЧтенияДанных = 200;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ключ)
		И ЗначениеЗаполнено(Объект.Пароль) 
		И ЗначениеЗаполнено(Объект.Сервер) Тогда
		
		Элементы.Страницы.ТекущаяСтраница	= Элементы.СтраницаЗагрузка;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура тчДокументыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока	= Элементы.тчДокументы.ТекущиеДанные;	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.тчСостав.ОтборСтрок	= Новый ФиксированнаяСтруктура("УИД", ТекСтрока.УИД);
	
КонецПроцедуры

&НаКлиенте
Процедура тчДокументыПередУдалением(Элемент, Отказ)
	
	ТекСтрока	= Элементы.тчДокументы.ТекущиеДанные;	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУдалить	= Объект.тчСостав.НайтиСтроки(Новый Структура("УИД", ТекСтрока.УИД));
	Для Каждого лСтрокаУдалить Из СтрокиУдалить Цикл
		Объект.тчСостав.Удалить(СтрокиУдалить);	
	КонецЦикла;	
	
КонецПроцедуры



&НаСервере
Функция MD5(НачальнаяСтрока, КонСтрока)

	//ХешSHA1 = Новый ХешированиеДанных(ХешФункция.SHA1);
	//ХешSHA1.Добавить(НачальнаяСтрока);
	
	ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешMD5.Добавить(НачальнаяСтрока);

	КонСтрока = Строка(ХешMD5.ХешСумма);
	КонСтрока = НРег(СтрЗаменить(КонСтрока, " ", ""));
	
КонецФункции


&НаСервере
Функция ПреобразоватьДатуВСтр(пДата)
	
	лГод	= Формат(Год(пДата), "ЧЦ=4; ЧГ=0");
	лМесяц	= Формат(Месяц(пДата), "ЧЦ=2; ЧВН=");
	лДень	= Формат(День(пДата), "ЧЦ=2; ЧВН=");
	
	Возврат лГод+"-"+лМесяц+"-"+лДень;
	
КонецФункции	

&НаСервере
Функция ПреобразоватьДатуИзСтр(пДата)
	
	Если НЕ ЗначениеЗаполнено(пДата)
		ИЛИ пДата = "null" Тогда
		Возврат Дата("00010101");	
	КонецЕсли;	
	
	лГод	= Лев(пДата, 4);
	лМесяц	= Сред(пДата, 6, 2);
	лДень	= Сред(пДата, 9, 2);
	
	Возврат Дата(лГод+лМесяц+лДень);
	
КонецФункции	

&НаСервере
Функция ПреобразоватьЧислоИзСтр(пЧислоСтр)
	
	пЧислоСтр	= СтрЗаменить(пЧислоСтр, ",", ".");
	лЗначение	= 0;
	
	Попытка
		лЗначение	= Число(пЧислоСтр);	
	Исключение
	КонецПопытки;	
	
	
	Возврат лЗначение;
	
КонецФункции	



&НаСервере
Функция ПолучитьЛокальнуюСсылку(пУИД, пТипСсылки)

	Если НЕ ЗначениеЗаполнено(пУИД)
		ИЛИ НЕ ЗначениеЗаполнено(пТипСсылки) Тогда
		
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Соот.УникальныйИдентификаторИсточника,
	|	Соот.ТипПриемника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК Соот
	|ГДЕ
	|	Соот.УникальныйИдентификаторИсточникаСтрокой = &УИД
	|	И Соот.ТипИсточника = &ТипИсточника";
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("УИД", 				пУИД);
	Запрос.УстановитьПараметр("ТипИсточника", 		СокрЛП(пТипСсылки));
	
	Выборка			= Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		лНайдСсылка	= Выборка.УникальныйИдентификаторИсточника;	
	КонецЕсли;	
	
	Возврат лНайдСсылка;
	
КонецФункции

&НаСервере
Функция ПолучитьДоговорКонтрагента(пКонтрагент, пНомерДоговора)

	лНайдДоговор	= Неопределено;
	
	Если НЕ ЗначениеЗаполнено(пКонтрагент) Тогда
		Возврат лНайдДоговор;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(пНомерДоговора) Тогда
	
		ТекстЗапроса	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
		
	Иначе
		
		ТекстЗапроса	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
		
	КонецЕсли;	
		
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", 		пКонтрагент);
	Запрос.УстановитьПараметр("ВидДоговора", 		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("Номер", 				пНомерДоговора);
	
	Выборка			= Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		лНайдДоговор	= Выборка.Ссылка;	
	КонецЕсли;	
	
	Возврат лНайдДоговор;
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуру(пИдентификатор)

	лНайдНоменклатура	= Неопределено;
	Если НЕ ЗначениеЗаполнено(пИдентификатор)	Тогда
		Возврат лНайдНоменклатура;
	КонецЕсли;	
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Номенклатура,
	|	НоменклатураПоставщиков.Идентификатор
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НЕ НоменклатураПоставщиков.ПометкаУдаления
	|	И НоменклатураПоставщиков.Идентификатор = &Идентификатор";
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Идентификатор", 		пИдентификатор);
	Выборка			= Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		лНайдНоменклатура	= Выборка.Номенклатура;	
	КонецЕсли;	
	
	Возврат лНайдНоменклатура;
	
КонецФункции

&НаСервере
Функция ОпределитьСтавкуНДС(пСуммаСНДС, пСуммаНДС)
	
	лРезультат	= Неопределено;
	Если пСуммаНДС = 0 Тогда
		лРезультат	= Перечисления.СтавкиНДС.БезНДС;
	Иначе
		лСуммаБезНДС	= пСуммаСНДС - пСуммаНДС;
		лПроцентНДС		= Окр(пСуммаНДС/лСуммаБезНДС*100);
		
		Если лПроцентНДС	= 20 Тогда
			лРезультат	= Перечисления.СтавкиНДС.НДС20;
		ИначеЕсли лПроцентНДС	= 18 Тогда	
			лРезультат	= Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли лПроцентНДС	= 10 Тогда	
			лРезультат	= Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;	
			
	КонецЕсли;	
		
	Возврат лРезультат;
	
КонецФункции	



&НаСервере
Функция Прочитать_Сервер(пНижняяГраница, Знач пШаг, пВсегоЗаписей, пЭтоТест)
	
	ТабПараметры	= Новый ТаблицаЗначений;
	ТабПараметры.Колонки.Добавить("Параметр");
	ТабПараметры.Колонки.Добавить("ПараметрЕнкод");
	ТабПараметры.Колонки.Добавить("ПриоритетЗапрос");
	
	НовСтр	= ТабПараметры.Добавить();
	//НовСтр.ПараметрЕнкод	= "fields=amount%2Cclient__id%2Cclient__name%2Cclient__variable__inn%2Ctype%2Cdate%2Cid%2Clines%2Cnumber%2Ctaxes%2Ctotal";
	//НовСтр.ПараметрЕнкод	= "fields=amount%2Cclient__id%2Cclient__name%2Cclient__variable__inn%2Ctype%2Cdate%2Cid%2Clines%2Cnumber%2Ctaxes%2Ctotal%2Cdoc_number%2Cdoc_date";
	//НовСтр.ПараметрЕнкод	= "fields=amount%2Cclient__id%2Cclient__name%2Cclient__variable__bank_account_no%2Cclient__variable__bank_corr_acc_no%2Cclient__variable__bank_name%2Cclient__variable__email%2Cclient__variable__faddress%2Cclient__variable__inn%2Cclient__variable__kpp%2Cclient__variable__maddress%2Cclient__variable__mfo%2Cclient__variable__okpo%2Cclient__variable__uaddress%2Cclient__variable__wphone%2Ctype%2Cdate%2Cid%2Clines%2Cnumber%2Ctaxes%2Ctotal%2Cdoc_number%2Cdoc_date";
	НовСтр.ПараметрЕнкод	= "fields=amount%2Cclient__id%2Cclient__name%2Cclient__variable__bank_account_no%2Cclient__variable__bank_bik%2Cclient__variable__bank_corr_acc_no%2Cclient__variable__bank_name%2Cclient__variable__email%2Cclient__variable__faddress%2Cclient__variable__inn%2Cclient__variable__kpp%2Cclient__variable__maddress%2Cclient__variable__mfo%2Cclient__variable__ogrn%2Cclient__variable__okpo%2Cclient__variable__uaddress%2Cclient__variable__wphone%2Ctype%2Cdate%2Cid%2Clines%2Cnumber%2Ctaxes%2Ctotal%2Cdoc_number%2Cdoc_date";
	
	НовСтр.ПриоритетЗапрос = 1;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[logic]=AND";
	НовСтр.ПриоритетЗапрос = 4;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][0][field]=date";
	НовСтр.ПриоритетЗапрос = 5;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][0][value]="+ПреобразоватьДатуВСтр(Объект.ДатаС);
	НовСтр.ПриоритетЗапрос = 6;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][0][operator]=gte";
	НовСтр.ПриоритетЗапрос = 7;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][1][field]=date";
	НовСтр.ПриоритетЗапрос = 8;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][1][value]="+ПреобразоватьДатуВСтр(Объект.ДатаПо);
	НовСтр.ПриоритетЗапрос = 9;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "filter[filters][1][operator]=lte";
	НовСтр.ПриоритетЗапрос = 10;
	
	//НовСтр	= ТабПараметры.Добавить();
	//НовСтр.ПараметрЕнкод	= "take=10";
	//НовСтр.ПриоритетЗапрос = 2;
	
	НовСтр	= ТабПараметры.Добавить();
	//НовСтр.ПараметрЕнкод	= "user=integration";
	НовСтр.ПараметрЕнкод	= "user=" + СокрЛП(Объект.Пароль);
	НовСтр.ПриоритетЗапрос = 3;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "skip="+Формат(пНижняяГраница, "ЧН=0; ЧГ=0");
	НовСтр.ПриоритетЗапрос = 11;
	
	НовСтр	= ТабПараметры.Добавить();
	НовСтр.ПараметрЕнкод	= "take="+Формат(пШаг, "ЧН=0; ЧГ=0");
	НовСтр.ПриоритетЗапрос = 12;
	
	
	//Ключ			= "c9fa608e-693f-47ec-ba30-0fc540732aa4";
	Ключ			= СокрЛП(Объект.Ключ);
	Пароль			= СокрЛП(Объект.Пароль);
	Сервер			= СокрЛП(Объект.Сервер);
	Апи			= "/api/key/documents/";
	ПараметрыСтр	= "";
	ПараметрыУрл	= "";
	
	ТабПараметры.Сортировать("ПараметрЕнкод Возр");
	Для Каждого лСтрока Из ТабПараметры Цикл
		ТекПараметр	= лСтрока.ПараметрЕнкод;
		ПараметрыСтр	= ПараметрыСтр + ?(ПараметрыСтр="", СокрЛП(ТекПараметр), "&"+СокрЛП(ТекПараметр));
	КонецЦикла;	 
	
	ТабПараметры.Сортировать("ПриоритетЗапрос Возр");
	Для Каждого лСтрока Из ТабПараметры Цикл
		ТекПараметрУрл	= лСтрока.ПараметрЕнкод;
		ПараметрыУрл	= ПараметрыУрл + ?(ПараметрыУрл="", "?"+ТекПараметрУрл, "&"+ТекПараметрУрл);		 
	КонецЦикла;	 
	
	
	//ХэшСтрока			= "";
	//СтрокаВХеш			= ПараметрыСтр + Ключ;
	//MD5(СтрокаВХеш, ХэшСтрока);
	
	//ПараметрыУрл	= ПараметрыУрл + "&token=" + ХэшСтрока;
	
	//ЗапросУрл		= Апи + ПараметрыУрл;
	ЗапросУрл		= Апи + ПараметрыУрл;
	ssl 	= Новый ЗащищенноеСоединениеOpenSSL();
	HTTP 	= Новый HTTPСоединение(Сервер,,Ключ,Пароль,,0,ssl);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	Попытка
		HTTP.Получить(ЗапросУрл, ФайлРезультата);
	Исключение
		Если НЕ пЭтоТест Тогда
			Сообщить("Описание ошибки: " + ОписаниеОшибки());
		КонецЕсли;	
		Возврат Ложь;
	КонецПопытки;	 
	
	Ответ = Новый ТекстовыйДокумент();
	Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
	ТекстОтвета = Ответ.ПолучитьТекст();
	УдалитьФайлы(ФайлРезультата);
	
	//Сообщить(ТекстОтвета);
	
	ТекущаяОбработка = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ТекстОтвета = ТекущаяОбработка.новЗаписатьJSON(ТекущаяОбработка.новПрочитатьJSON(ТекстОтвета, Истина), Истина);
		лСтрукОтвет	= ТекущаяОбработка.ЗаполнитьСтруктуруИзОтветаJSON(ТекстОтвета);
	Исключение
		ТекстОтвета = ИнформацияОбОшибке().Описание;
		Сообщить(ТекстОтвета, СтатусСообщения.Важное);
		пНижняяГраница	= пНижняяГраница + пШаг;
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ пЭтоТест Тогда
		ДобавитьДанныеДокументов(лСтрукОтвет);
	КонецЕсли;	
	
	Если пНижняяГраница = 0 Тогда
		пВсегоЗаписей	= Число(лСтрукОтвет.count);
	КонецЕсли;
	
	пНижняяГраница	= пНижняяГраница + пШаг;
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Процедура ДобавитьДанныеДокументов(лСтрукОтвет)
	
	 Если ТипЗнч(лСтрукОтвет) = Тип("Структура")
		 И лСтрукОтвет.success = "true"
		 И Число(лСтрукОтвет.count) > 0 Тогда
		 
	 	МасДокументов	= лСтрукОтвет.data;		 
		Для Каждого лСтрокаДок Из МасДокументов Цикл
			
			Если ПреобразоватьЧислоИзСтр(лСтрокаДок.total) = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НовСтрДокумент	= Объект.тчДокументы.Добавить();
			НовСтрДокумент.ИД					= лСтрокаДок.id;
			НовСтрДокумент.ВидДокумента			= лСтрокаДок.type;
			НовСтрДокумент.Номер				= СокрЛП(лСтрокаДок.number);
			НовСтрДокумент.Дата					= ПреобразоватьДатуИзСтр(лСтрокаДок.date);
			
			НовСтрДокумент.ДоговорДата			= ПреобразоватьДатуИзСтр(лСтрокаДок.doc_date);
			НовСтрДокумент.ДоговорНомер			= ?(лСтрокаДок.doc_number="null", "", лСтрокаДок.doc_number);
			Если СокрЛП(НовСтрДокумент.ВидДокумента) = "invoicefact" Тогда
				НовСтрДокумент.АктИД				=?(лСтрокаДок.implement="null", "", лСтрокаДок.implement);
			КонецЕсли;	
			
			НовСтрДокумент.КонтрагентИД			= ?(лСтрокаДок.client__id="null", "", лСтрокаДок.client__id);
			НовСтрДокумент.КонтрагентНазвание	= лСтрокаДок.client__name;
			НовСтрДокумент.КонтрагентИНН		= ?(лСтрокаДок.client__variable__inn="null", "", лСтрокаДок.client__variable__inn);
			НовСтрДокумент.СуммаДокумента		= ПреобразоватьЧислоИзСтр(лСтрокаДок.total);
			НовСтрДокумент.СуммаНДС				= ПреобразоватьЧислоИзСтр(лСтрокаДок.taxes);
			НовСтрДокумент.УИД					= Новый УникальныйИдентификатор;
			
			НовСтрДокумент.Документ				= ПолучитьЛокальнуюСсылку(НовСтрДокумент.ИД, НовСтрДокумент.ВидДокумента);
			Если ЗначениеЗаполнено(НовСтрДокумент.Документ) Тогда
				НовСтрДокумент.Контрагент			= НовСтрДокумент.Документ.Контрагент;
				НовСтрДокумент.ДоговорКонтрагента	= НовСтрДокумент.Документ.ДоговорКонтрагента;
			Иначе	
				НовСтрДокумент.Контрагент			= ПолучитьЛокальнуюСсылку(НовСтрДокумент.ИД, "Контрагент");
				НовСтрДокумент.ДоговорКонтрагента	= ПолучитьДоговорКонтрагента(НовСтрДокумент.Контрагент, "");
			КонецЕсли;	
			НовСтрДокумент.КонтрагентОКПО			= ?(лСтрокаДок.client__variable__okpo="null", "", лСтрокаДок.client__variable__okpo);
			НовСтрДокумент.КонтрагенКПП				= ?(лСтрокаДок.client__variable__kpp="null", "", лСтрокаДок.client__variable__kpp);
			НовСтрДокумент.КонтрагентЮрАдрес		= ?(лСтрокаДок.client__variable__uaddress="null", "", лСтрокаДок.client__variable__uaddress);
			НовСтрДокумент.КонтрагентФизАдрес		= ?(лСтрокаДок.client__variable__faddress="null", "", лСтрокаДок.client__variable__faddress);
			НовСтрДокумент.КонтрагентПочтАдрес		= ?(лСтрокаДок.client__variable__maddress="null", "", лСтрокаДок.client__variable__maddress);
			НовСтрДокумент.КонтрагентМайл			= ?(лСтрокаДок.client__variable__email="null", "", лСтрокаДок.client__variable__email);
			НовСтрДокумент.КонтрагентТелефон		= ?(лСтрокаДок.client__variable__wphone="null", "", лСтрокаДок.client__variable__wphone);
			НовСтрДокумент.КонтрагентБанкСчет		= ?(лСтрокаДок.client__variable__bank_account_no="null", "", лСтрокаДок.client__variable__bank_account_no);
			НовСтрДокумент.КонтрагентМФО			= ?(лСтрокаДок.client__variable__mfo="null", "", лСтрокаДок.client__variable__mfo);
			НовСтрДокумент.КонтрагентБанкНазвание	= ?(лСтрокаДок.client__variable__bank_name="null", "", лСтрокаДок.client__variable__bank_name);
			НовСтрДокумент.КонтрагентКоррСчет       = ?(лСтрокаДок.client__variable__bank_corr_acc_no="null", "", лСтрокаДок.client__variable__bank_corr_acc_no);
			НовСтрДокумент.КонтрагентОГРН	        = ?(лСтрокаДок.client__variable__ogrn="null", "", лСтрокаДок.client__variable__ogrn);
			НовСтрДокумент.КонтрагентБИК	        = ?(лСтрокаДок.client__variable__bank_bik="null", "", лСтрокаДок.client__variable__bank_bik);
			
			НовСтрДокумент.КонтрагентЮрАдрес		= """"+СтрЗаменить(СокрЛП(НовСтрДокумент.КонтрагентЮрАдрес), "\\", "\")+"""";
			НовСтрДокумент.КонтрагентФизАдрес		= """"+СтрЗаменить(СокрЛП(НовСтрДокумент.КонтрагентФизАдрес), "\\", "\")+"""";
			НовСтрДокумент.КонтрагентПочтАдрес		= """"+СтрЗаменить(СокрЛП(НовСтрДокумент.КонтрагентПочтАдрес), "\\", "\")+"""";
			НовСтрДокумент.КонтрагентБанкНазвание	= """"+СтрЗаменить(СокрЛП(НовСтрДокумент.КонтрагентБанкНазвание), "\\", "\")+"""";
			
			ТекущаяОбработка = РеквизитФормыВЗначение("Объект");
			НовСтрДокумент.КонтрагентЮрАдрес		= ТекущаяОбработка.новПрочитатьJSON(СокрЛП(НовСтрДокумент.КонтрагентЮрАдрес));
			НовСтрДокумент.КонтрагентФизАдрес		= ТекущаяОбработка.новПрочитатьJSON(СокрЛП(НовСтрДокумент.КонтрагентФизАдрес));
			НовСтрДокумент.КонтрагентПочтАдрес		= ТекущаяОбработка.новПрочитатьJSON(СокрЛП(НовСтрДокумент.КонтрагентПочтАдрес));
			НовСтрДокумент.КонтрагентБанкНазвание	= ТекущаяОбработка.новПрочитатьJSON(СокрЛП(НовСтрДокумент.КонтрагентБанкНазвание));
			
			НовСтрДокумент.Отметка	= Ложь;
			Если НЕ ЗначениеЗаполнено(НовСтрДокумент.Документ)
				ИЛИ НЕ ЗначениеЗаполнено(НовСтрДокумент.Контрагент)
				ИЛИ НЕ ЗначениеЗаполнено(НовСтрДокумент.ДоговорКонтрагента)  Тогда
				
				НовСтрДокумент.Отметка	= Истина;      
			КонецЕсли;	
			
			Если лСтрокаДок.Свойство("lines") = Истина Тогда
				
				МассивСтрокДок	= лСтрокаДок.lines;
				
				Для Каждого лСтрокаТЧДок	Из МассивСтрокДок Цикл
					
					Если ПреобразоватьЧислоИзСтр(лСтрокаТЧДок.total) = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					НосСтрТЧДок	= Объект.тчСостав.Добавить();
					
					НосСтрТЧДок.НоменклатураИД		= лСтрокаТЧДок.nom_id;
					НосСтрТЧДок.НоменклатураНаим	= лСтрокаТЧДок.nom_name;
					НосСтрТЧДок.НоменклатураСтр		= лСтрокаТЧДок.text;
					
					НосСтрТЧДок.Количество			= ПреобразоватьЧислоИзСтр(лСтрокаТЧДок.count);
					НосСтрТЧДок.Цена				= ПреобразоватьЧислоИзСтр(лСтрокаТЧДок.cost);
					НосСтрТЧДок.Сумма				= ПреобразоватьЧислоИзСтр(лСтрокаТЧДок.total);
					НосСтрТЧДок.НДС					= ПреобразоватьЧислоИзСтр(лСтрокаТЧДок.taxes);
					НосСтрТЧДок.УИД					= НовСтрДокумент.УИД;
					
					НосСтрТЧДок.Номенклатура		= ПолучитьЛокальнуюСсылку(НосСтрТЧДок.НоменклатураИД, "Номенклатура");
					НосСтрТЧДок.СтавкаНДС			= ОпределитьСтавкуНДС(НосСтрТЧДок.Сумма, НосСтрТЧДок.НДС);
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЦикла;
		 
	 КонецЕсли;
	
КонецПроцедуры	


&НаКлиенте
Процедура КомандаПрочитать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Организация не заполнена!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Сервер) Тогда
		Сообщить("Сервер не заполнен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Пароль) Тогда
		Сообщить("Пароль не заполнен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ключ) Тогда
		Сообщить("Ключ не заполнен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.ШагЧтенияДанных) Тогда
		Сообщить("Шаг чтения данных не заполнен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Сообщить("Идет загрузка данных билинга!", СтатусСообщения.Информация);
	
	Объект.тчДокументы.Очистить();
	Объект.тчСостав.Очистить();
	
	лНижняяГраница  = 0;
	ШагЗначение		= Объект.ШагЧтенияДанных;
	лШаг			= ШагЗначение;
	лВсегоЗаписей	= лШаг+1;
	
	Пока лВсегоЗаписей > лНижняяГраница Цикл
		
		лФлагЗанрузки = Прочитать_Сервер(лНижняяГраница, лШаг, лВсегоЗаписей, Ложь);
		
		лПроцентЗагрузки	= ?(лВсегоЗаписей=0,0, 100*лНижняяГраница/лВсегоЗаписей);
		лПроцентЗагрузки	= Окр(лПроцентЗагрузки, 0);
		Если лФлагЗанрузки = Истина Тогда
			Состояние("Загружено " + лНижняяГраница + " из " + лВсегоЗаписей, лПроцентЗагрузки);
		Иначе
			Состояние("Загружено 0 из 0", 100);
		КонецЕсли;	
		ОбновитьОтображениеДанных();
		ОбработкаПрерыванияПользователя();
		
		Если лФлагЗанрузки = Ложь Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если лФлагЗанрузки = Истина  Тогда
		Состояние("Загружено " + лВсегоЗаписей + " из " + лВсегоЗаписей, 100);
	КонецЕсли;	
	
	Если Объект.тчДокументы.Количество() > 0 Тогда
	 	Элементы.тчДокументы.ТекущаяСтрока	= Объект.тчДокументы[0];	 
		тчДокументыПриАктивизацииСтроки(Неопределено); 
	КонецЕсли;
	 
	Сообщить("Загрузка данных билинга закончена!", СтатусСообщения.Информация);
	 
КонецПроцедуры


&НаСервере
Процедура ЗаписатьУИДСсылки(пУИД, пТипСсылки, пСсылка)
	
	Если НЕ ЗначениеЗаполнено(пУИД)
		ИЛИ НЕ ЗначениеЗаполнено(пТипСсылки) 
		ИЛИ НЕ ЗначениеЗаполнено(пСсылка) Тогда
		
		Возврат;
	КонецЕсли;	
	
	ПО_Техн		= ПланыОбмена.ОбменСообщениями.НайтиПоНаименованию("ОбменВнешнееПО");
	Если НЕ ЗначениеЗаполнено(ПО_Техн) Тогда
		НовУзел	= ПланыОбмена.ОбменСообщениями.СоздатьУзел();
		НовУзел.Наименование	= "ОбменВнешнееПО";
		НовУзел.Записать();
		ПО_Техн	=  НовУзел.Ссылка;
	КонецЕсли;	
	
	НаборЗаписей		= РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторИсточника.Установить(пСсылка);
	НаборЗаписей.Отбор.ТипИсточника.Установить(пТипСсылки);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись			= НаборЗаписей.Добавить();
	НоваяЗапись.УзелИнформационнойБазы					= ПО_Техн;
	НоваяЗапись.УникальныйИдентификаторИсточника		= пСсылка;
	НоваяЗапись.ТипИсточника							= СокрЛП(пТипСсылки);
	НоваяЗапись.УникальныйИдентификаторИсточникаСтрокой	= пУИД;
	НоваяЗапись.ОбъектВыгруженПоСсылке					= Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры	


&НаСервере
Процедура ДобавитьКонтактнуюИнформацию(пКонтрагентОбъект, пТип, пВид, пЗначение)

	Если НЕ ЗначениеЗаполнено(пЗначение) Тогда 
		Возврат;
	КонецЕсли;	
	
	лНовСтрока	= пКонтрагентОбъект.КонтактнаяИнформация.Добавить();	
 	лНовСтрока.Тип				= пТип;
 	лНовСтрока.Вид				= пВид;
 	лНовСтрока.Представление	= пЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагента(пСтрокаДок)

	Если ЗначениеЗаполнено(пСтрокаДок.Контрагент) Тогда
		Возврат;	
	КонецЕсли;	

	лНайдСсылка		= ПолучитьЛокальнуюСсылку(пСтрокаДок.КонтрагентИД, "Контрагент");
	Если ЗначениеЗаполнено(лНайдСсылка) Тогда
		пСтрокаДок.Контрагент	= лНайдСсылка; 
		Возврат;
	КонецЕсли;	
	
	НовКонтрагент	= Справочники.Контрагенты.СоздатьЭлемент();
	НовКонтрагент.Наименование			= пСтрокаДок.КонтрагентНазвание;
	НовКонтрагент.НаименованиеПолное	= пСтрокаДок.КонтрагентНазвание;
	НовКонтрагент.ИНН					= пСтрокаДок.КонтрагентИНН;
	НовКонтрагент.КодПоОКПО				= пСтрокаДок.КонтрагентОКПО;
	НовКонтрагент.КПП					= пСтрокаДок.КонтрагенКПП;
	Если ЗначениеЗаполнено(НовКонтрагент.КПП) Тогда
		НовКонтрагент.КППВведенКорректно	= Истина;
	КонецЕсли;	
	НовКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Если ЗначениеЗаполнено(пСтрокаДок.КонтрагентОГРН) Тогда
		НовКонтрагент.Комментарий	= "ОГРН: " + пСтрокаДок.КонтрагентОГРН;
	КонецЕсли;	
	
	ДобавитьКонтактнуюИнформацию(НовКонтрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, пСтрокаДок.КонтрагентЮрАдрес);
	ДобавитьКонтактнуюИнформацию(НовКонтрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, пСтрокаДок.КонтрагентФизАдрес);
	ДобавитьКонтактнуюИнформацию(НовКонтрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, пСтрокаДок.КонтрагентПочтАдрес);
	ДобавитьКонтактнуюИнформацию(НовКонтрагент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, пСтрокаДок.КонтрагентМайл);
	ДобавитьКонтактнуюИнформацию(НовКонтрагент, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, пСтрокаДок.КонтрагентТелефон);
	НовКонтрагент.Записать();
	
	Если ЗначениеЗаполнено(пСтрокаДок.КонтрагентБанкСчет) Тогда
		НовБанкСчет				= Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовБанкСчет.Владелец    = НовКонтрагент.Ссылка;
		НовБанкСчет.Наименование= пСтрокаДок.КонтрагентБанкНазвание;
		НовБанкСчет.НомерСчета  = пСтрокаДок.КонтрагентБанкСчет;
		НовБанкСчет.НомерСчета  = пСтрокаДок.КонтрагентБанкСчет;
		НовБанкСчет.ВалютаДенежныхСредств  = Константы.ВалютаРегламентированногоУчета.Получить();
		НовБанкСчет.ВидСчета    = "Расчетный";
		Если ЗначениеЗаполнено(пСтрокаДок.КонтрагентБИК) Тогда
			НовБанкСчет.Банк		= Справочники.Банки.НайтиПоКоду(пСтрокаДок.КонтрагентБИК);
			Если НЕ ЗначениеЗаполнено(НовБанкСчет.Банк) Тогда
				НовБанк						= Справочники.Банки.СоздатьЭлемент();
				НовБанк.Код					= пСтрокаДок.КонтрагентБИК;
				НовБанк.Наименование		= "Счет в " + СокрЛП(пСтрокаДок.КонтрагентБанкНазвание);
				НовБанк.КоррСчет			= пСтрокаДок.КонтрагентКоррСчет;
				НовБанк.Записать();
				НовБанкСчет.Банк			= НовБанк.Ссылка;
			КонецЕсли;
		КонецЕсли;	
		НовБанкСчет.Записать();
		НовКонтрагент.ОсновнойБанковскийСчет	= НовБанкСчет.Ссылка;
		НовКонтрагент.Записать();
	КонецЕсли;
	
	пСтрокаДок.Контрагент				= НовКонтрагент.Ссылка; 
	
	Если ЗначениеЗаполнено(пСтрокаДок.Контрагент) Тогда 
		ЗаписатьУИДСсылки(пСтрокаДок.КонтрагентИД, "Контрагент", пСтрокаДок.Контрагент);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДоговорКонтрагента(пСтрокаДок)

	Если ЗначениеЗаполнено(пСтрокаДок.ДоговорКонтрагента) 
		И ЗначениеЗаполнено(пСтрокаДок.Контрагент)  Тогда
		Возврат;	
	КонецЕсли;	

	НовДоговор	= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовДоговор.Номер				= СокрЛП(пСтрокаДок.ДоговорНомер);
	НовДоговор.Дата					= пСтрокаДок.ДоговорДата;
	Если ЗначениеЗаполнено(пСтрокаДок.ДоговорНомер) Тогда
		НовДоговор.Наименование			= "Договор № " + СокрЛП(пСтрокаДок.ДоговорНомер) + " от " + НовДоговор.Дата;
	Иначе	
		НовДоговор.Наименование			= "Основной договор";
	КонецЕсли;	
	НовДоговор.Организация			= Объект.Организация;
	НовДоговор.Владелец				= пСтрокаДок.Контрагент;
	НовДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	НовДоговор.ВидДоговора			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

	НовДоговор.Записать();
	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.Контрагент.ОсновнойДоговорКонтрагента) Тогда
		КонтрагентОбъект	= пСтрокаДок.Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ОсновнойДоговорКонтрагента	= НовДоговор.Ссылка;
		КонтрагентОбъект.Записать();
	КонецЕсли;	
	
	пСтрокаДок.ДоговорКонтрагента	= НовДоговор.Ссылка; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНоменклатуру(пСтрокаТЧ)

	Если ЗначениеЗаполнено(пСтрокаТЧ.Номенклатура) Тогда
		Возврат;	
	КонецЕсли;	

	лНайдСсылка		= ПолучитьЛокальнуюСсылку(пСтрокаТЧ.НоменклатураИД, "Номенклатура");
	Если ЗначениеЗаполнено(лНайдСсылка) Тогда
		пСтрокаТЧ.Номенклатура	= лНайдСсылка; 
		Возврат;
	КонецЕсли;	
	
	НовНоменклатура	= Справочники.Номенклатура.СоздатьЭлемент();
	НовНоменклатура.Наименование			= пСтрокаТЧ.НоменклатураНаим;
	НовНоменклатура.НаименованиеПолное		= пСтрокаТЧ.НоменклатураНаим;
	НовНоменклатура.СтавкаНДС				= пСтрокаТЧ.СтавкаНДС;
	НовНоменклатура.Услуга                	= Истина;
	НовНоменклатура.ЕдиницаИзмерения       	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	
	Если НЕ ЗначениеЗаполнено(НовНоменклатура.ЕдиницаИзмерения) Тогда
		НовНоменклатура.ЕдиницаИзмерения    = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НовНоменклатура.ЕдиницаИзмерения) Тогда
		НовЕдИзм		= Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НовЕдИзм.Код					= "796";
		НовЕдИзм.Наименование			= "шт";
		НовЕдИзм.НаименованиеПолное		= "штука";
		НовЕдИзм.Записать();
		НовНоменклатура.ЕдиницаИзмерения= НовЕдИзм.Ссылка;
	КонецЕсли;	
	НовНоменклатура.Записать();
	
	ЗаписатьУИДСсылки(пСтрокаТЧ.НоменклатураИД, "Номенклатура", НовНоменклатура.Ссылка);
	
	пСтрокаТЧ.Номенклатура				= НовНоменклатура.Ссылка; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСчет(пСтрокаДок, пСтрокиТЧ)

	Если ЗначениеЗаполнено(пСтрокаДок.Документ) Тогда
		ДокументСчет	= пСтрокаДок.Документ.ПолучитьОбъект();
	Иначе
		ДокументСчет	= Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	КонецЕсли;	
	
	ДокументСчет.Дата				= пСтрокаДок.Дата;
	ДокументСчет.Номер				= СокрЛП(пСтрокаДок.Номер);
	ДокументСчет.Организация		= Объект.Организация;
	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.Контрагент) Тогда
		ЗаписатьКонтрагента(пСтрокаДок);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.ДоговорКонтрагента) Тогда
		ЗаписатьДоговорКонтрагента(пСтрокаДок)		
	КонецЕсли;	
	
	ДокументСчет.Контрагент			= пСтрокаДок.Контрагент;
	ДокументСчет.ДоговорКонтрагента	= пСтрокаДок.ДоговорКонтрагента;
	ДокументСчет.СтруктурнаяЕдиница	= Объект.Организация.ОсновнойБанковскийСчет;
	ДокументСчет.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументСчет.КурсВзаиморасчетов			= 1;
	ДокументСчет.КратностьВзаиморасчетов	= 1;
	ДокументСчет.СуммаВключаетНДС			= Истина;
	ДокументСчет.СуммаДокумента				= пСтрокаДок.СуммаДокумента;
	
	//ДокументСчет.Услуги.Очистить();
	ДокументСчет.Товары.Очистить();
	
	Для Каждого лСтрокаТЧ Из пСтрокиТЧ Цикл
		
		НовСтрокаУсл	= ДокументСчет.Товары.Добавить();
		
		Если НЕ ЗначениеЗаполнено(лСтрокаТЧ.Номенклатура) Тогда
			ЗаписатьНоменклатуру(лСтрокаТЧ);	
		КонецЕсли;
		
		НовСтрокаУсл.Номенклатура		= лСтрокаТЧ.Номенклатура;
		НовСтрокаУсл.Содержание			= лСтрокаТЧ.НоменклатураСтр;
		НовСтрокаУсл.Количество			= лСтрокаТЧ.Количество;
		НовСтрокаУсл.Цена				= лСтрокаТЧ.Цена;
		НовСтрокаУсл.Сумма				= лСтрокаТЧ.Сумма;
		НовСтрокаУсл.СтавкаНДС			= лСтрокаТЧ.СтавкаНДС;
		НовСтрокаУсл.СуммаНДС			= лСтрокаТЧ.НДС;
		
	КонецЦикла;
	
	ДокументСчет.ОбменДанными.Загрузка	= Истина;
	
	ДокументСчет.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ДокументСчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
	КонецПопытки;	
	
	ЗаписатьУИДСсылки(пСтрокаДок.ИД, пСтрокаДок.ВидДокумента, ДокументСчет.Ссылка);
	
	пСтрокаДок.Документ	= ДокументСчет.Ссылка;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьРТУ(пСтрокаДок, пСтрокиТЧ)

	Если ЗначениеЗаполнено(пСтрокаДок.Документ) Тогда
		ДокументРТУ	= пСтрокаДок.Документ.ПолучитьОбъект();
	Иначе
		ДокументРТУ	= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;	
	
	ДокументРТУ.Дата				= пСтрокаДок.Дата;
	ДокументРТУ.Номер				= СокрЛП(пСтрокаДок.Номер);
	ДокументРТУ.ВидОперации         = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.Контрагент) Тогда
		ЗаписатьКонтрагента(пСтрокаДок)		
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.ДоговорКонтрагента) Тогда
		ЗаписатьДоговорКонтрагента(пСтрокаДок)		
	КонецЕсли;	
	
	ДокументРТУ.Организация			= Объект.Организация;
	ДокументРТУ.Контрагент			= пСтрокаДок.Контрагент;
	ДокументРТУ.ДоговорКонтрагента	= пСтрокаДок.ДоговорКонтрагента;
	ДокументРТУ.ВалютаДокумента     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументРТУ.КурсВзаиморасчетов				= 1;
	ДокументРТУ.КратностьВзаиморасчетов			= 1;
	ДокументРТУ.СуммаВключаетНДС				= Истина;
	ДокументРТУ.СуммаДокумента					= пСтрокаДок.СуммаДокумента;
	ДокументРТУ.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	ДокументРТУ.СчетУчетаРасчетовПоАвансам		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	ДокументРТУ.БанковскийСчетОрганизации		= Объект.Организация.ОсновнойБанковскийСчет;
	ДокументРТУ.СпособЗачетаАвансов             = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокументРТУ.Услуги.Очистить();
	ДокументРТУ.Товары.Очистить();
	
	Для Каждого лСтрокаТЧ Из пСтрокиТЧ Цикл
		
		НовСтрокаУсл	= ДокументРТУ.Услуги.Добавить();
		
		Если НЕ ЗначениеЗаполнено(лСтрокаТЧ.Номенклатура) Тогда
			ЗаписатьНоменклатуру(лСтрокаТЧ);	
		КонецЕсли;
		
		НовСтрокаУсл.Номенклатура		= лСтрокаТЧ.Номенклатура;
		НовСтрокаУсл.Содержание			= лСтрокаТЧ.НоменклатураСтр;
		НовСтрокаУсл.Количество			= лСтрокаТЧ.Количество;
		НовСтрокаУсл.Цена				= лСтрокаТЧ.Цена;
		НовСтрокаУсл.Сумма				= лСтрокаТЧ.Сумма;
		НовСтрокаУсл.СтавкаНДС			= лСтрокаТЧ.СтавкаНДС;
		НовСтрокаУсл.СуммаНДС			= лСтрокаТЧ.НДС;
		
		НовСтрокаУсл.СчетДоходов		= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		НовСтрокаУсл.СчетРасходов		= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		НовСтрокаУсл.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		
	КонецЦикла;
	
	ДокументРТУ.ОбменДанными.Загрузка	= Истина;
	
	ДокументРТУ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ДокументРТУ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
	КонецПопытки;	
	
	ЗаписатьУИДСсылки(пСтрокаДок.ИД, пСтрокаДок.ВидДокумента, ДокументРТУ.Ссылка);
	
	пСтрокаДок.Документ	= ДокументРТУ.Ссылка;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьСчетФактуру(пСтрокаДок, пСтрокиТЧ)

	Если ЗначениеЗаполнено(пСтрокаДок.Документ) Тогда
		ДокументСчет	= пСтрокаДок.Документ.ПолучитьОбъект();
	Иначе
		ДокументСчет	= Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;	
	
	ДокументСчет.Дата				= пСтрокаДок.Дата;
	ДокументСчет.Номер				= СокрЛП(пСтрокаДок.Номер);
	ДокументСчет.ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	ДокументСчет.КодВидаОперации    = "01";
	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.Контрагент) Тогда
		ЗаписатьКонтрагента(пСтрокаДок)		
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(пСтрокаДок.ДоговорКонтрагента) Тогда
		ЗаписатьДоговорКонтрагента(пСтрокаДок)		
	КонецЕсли;	
	
	ДокументСчет.Организация		= Объект.Организация;
	ДокументСчет.Контрагент			= пСтрокаДок.Контрагент;
	ДокументСчет.ДоговорКонтрагента	= пСтрокаДок.ДоговорКонтрагента;
	ДокументСчет.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументСчет.ДатаВыставления	= пСтрокаДок.Дата;
	
	ДокументСчет.ДатаВыставления	= пСтрокаДок.Дата;
	ДокументСчет.КодСпособаВыставления = 1;
	
	//ДокументСчет.КурсВзаиморасчетов			= 1;
	//ДокументСчет.КратностьВзаиморасчетов	= 1;
	//ДокументСчет.СуммаВключаетНДС			= Истина;
	ДокументСчет.Выставлен                  = Истина;
	ДокументСчет.СуммаНДС                   = пСтрокаДок.СуммаНДС;
	ДокументСчет.СуммаНДСДокумента          = пСтрокаДок.СуммаНДС;
	ДокументСчет.СуммаДокумента				= пСтрокаДок.СуммаДокумента;
	
	//ДокументСчет.Услуги.Очистить();
	//ДокументСчет.Товары.Очистить();
	ДокументСчет.ПлатежноРасчетныеДокументы.Очистить();
	ДокументСчет.ДокументыОснования.Очистить();
	ДокументСчет.Авансы.Очистить();
	
	НовСтрока	= ДокументСчет.ДокументыОснования.Добавить();
	Если ЗначениеЗаполнено(пСтрокаДок.АктИД) Тогда
		НовСтрока.ДокументОснование 	= ПолучитьЛокальнуюСсылку(пСтрокаДок.АктИД, "revenue");
		ДокументСчет.ДокументОснование	= НовСтрока.ДокументОснование;
	КонецЕсли;	
	
	ДокументСчет.ОбменДанными.Загрузка	= Истина;
	
	ДокументСчет.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ДокументСчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
	КонецПопытки;	
	
	ЗаписатьУИДСсылки(пСтрокаДок.ИД, пСтрокаДок.ВидДокумента, ДокументСчет.Ссылка);
	
	пСтрокаДок.Документ	= ДокументСчет.Ссылка;
	
КонецПроцедуры	




&НаСервере
Процедура Записать_Сервер(пСтрокаДок)
	
	МассивСтрокТЧ	= Объект.тчСостав.НайтиСтроки(Новый Структура("УИД", пСтрокаДок.УИД));
	
	Если СокрЛП(пСтрокаДок.ВидДокумента) = "invoice" Тогда
		ЗаписатьСчет(пСтрокаДок, МассивСтрокТЧ);	
	ИначеЕсли СокрЛП(пСтрокаДок.ВидДокумента) = "revenue" Тогда	
		ЗаписатьРТУ(пСтрокаДок, МассивСтрокТЧ);	
	ИначеЕсли СокрЛП(пСтрокаДок.ВидДокумента) = "invoicefact" Тогда
		ЗаписатьСчетФактуру(пСтрокаДок, МассивСтрокТЧ);	
	КонецЕсли;	
	
	лСтрТЧДок	= Объект.тчДокументы.НайтиСтроки(Новый Структура("УИД", пСтрокаДок.УИД));
	Если лСтрТЧДок.Количество() > 0 Тогда
		лСтрТЧДок[0].Контрагент			= пСтрокаДок.Контрагент;
		лСтрТЧДок[0].ДоговорКонтрагента	= пСтрокаДок.ДоговорКонтрагента;
		лСтрТЧДок[0].Документ			= пСтрокаДок.Документ;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	лСтрокиОбработки	= Объект.тчДокументы.НайтиСтроки(Новый Структура("Отметка", Истина));
	лКвоСтрок			= лСтрокиОбработки.Количество();
	лНомСтроки			= 1;
	
	Сообщить("Идет запись данных билинга!", СтатусСообщения.Информация);
	
	Для Каждого лСтрокаДок Из лСтрокиОбработки Цикл
		
		лПроцентЗагрузки	= ?(лКвоСтрок=0,0, 100*лНомСтроки/лКвоСтрок);
		лПроцентЗагрузки	= Окр(лПроцентЗагрузки, 0);
		Состояние("Загружено " + лНомСтроки + " из " + лКвоСтрок, лПроцентЗагрузки);
		ОбновитьОтображениеДанных();
		ОбработкаПрерыванияПользователя();
		
		лСтрукПар	= Новый Структура;
		лСтрукПар.Вставить("Отметка", 				лСтрокаДок.Отметка);
		лСтрукПар.Вставить("ИД", 					лСтрокаДок.ИД);
		лСтрукПар.Вставить("ВидДокумента", 			лСтрокаДок.ВидДокумента);
		лСтрукПар.Вставить("КонтрагентИД", 			лСтрокаДок.КонтрагентИД);
		лСтрукПар.Вставить("КонтрагентНазвание", 	лСтрокаДок.КонтрагентНазвание);
		лСтрукПар.Вставить("КонтрагентИНН", 		лСтрокаДок.КонтрагентИНН);
		лСтрукПар.Вставить("КонтрагенКПП", 			лСтрокаДок.КонтрагенКПП);
		лСтрукПар.Вставить("СуммаДокумента", 		лСтрокаДок.СуммаДокумента);
		лСтрукПар.Вставить("СуммаНДС", 				лСтрокаДок.СуммаНДС);
		лСтрукПар.Вставить("Контрагент", 			лСтрокаДок.Контрагент);
		лСтрукПар.Вставить("ДоговорКонтрагента", 	лСтрокаДок.ДоговорКонтрагента);
		лСтрукПар.Вставить("Номер", 				лСтрокаДок.Номер);
		лСтрукПар.Вставить("УИД", 					лСтрокаДок.УИД);
		лСтрукПар.Вставить("Дата", 					лСтрокаДок.Дата);
		лСтрукПар.Вставить("Документ", 				лСтрокаДок.Документ);
		лСтрукПар.Вставить("ДоговорДата", 			лСтрокаДок.ДоговорДата);
		лСтрукПар.Вставить("ДоговорНомер", 			лСтрокаДок.ДоговорНомер);
		лСтрукПар.Вставить("АктИД", 				лСтрокаДок.АктИД);
		лСтрукПар.Вставить("КонтрагентОКПО", 		лСтрокаДок.КонтрагентОКПО);
		лСтрукПар.Вставить("КонтрагентЮрАдрес", 	лСтрокаДок.КонтрагентЮрАдрес);
		лСтрукПар.Вставить("КонтрагентФизАдрес", 	лСтрокаДок.КонтрагентФизАдрес);
		лСтрукПар.Вставить("КонтрагентПочтАдрес", 	лСтрокаДок.КонтрагентПочтАдрес);
		лСтрукПар.Вставить("КонтрагентМайл", 		лСтрокаДок.КонтрагентМайл);
		лСтрукПар.Вставить("КонтрагентТелефон", 	лСтрокаДок.КонтрагентТелефон);
		лСтрукПар.Вставить("КонтрагентБанкСчет", 	лСтрокаДок.КонтрагентБанкСчет);
		лСтрукПар.Вставить("КонтрагентМФО", 		лСтрокаДок.КонтрагентМФО);
		лСтрукПар.Вставить("КонтрагентБанкНазвание",лСтрокаДок.КонтрагентБанкНазвание);
		лСтрукПар.Вставить("КонтрагентКоррСчет",	лСтрокаДок.КонтрагентКоррСчет);
		лСтрукПар.Вставить("КонтрагентОГРН", 		лСтрокаДок.КонтрагентОГРН);
		лСтрукПар.Вставить("КонтрагентБИК", 		лСтрокаДок.КонтрагентБИК);
		
		
		Записать_Сервер(лСтрукПар);	
		
		лНомСтроки	= лНомСтроки + 1;
		
	КонецЦикла;	
	
	Сообщить("Успешно записаны " + (лНомСтроки-1) + " документа.", СтатусСообщения.Информация);
	
КонецПроцедуры


&НаСервере
Процедура СохранитьНастройки_Сервер()
	
	ХранилищеОбщихНастроек.Сохранить("ИмяСервера_ЗагрузкаДокументов", "ЗагрузкаДокументов", Объект.Сервер);
	ХранилищеОбщихНастроек.Сохранить("Пользователь_ЗагрузкаДокументов", "ЗагрузкаДокументов", Объект.Пароль);
	ХранилищеОбщихНастроек.Сохранить("ИмяСервера_Ключ", "ЗагрузкаДокументов", Объект.Ключ);
	ХранилищеОбщихНастроек.Сохранить("ИмяСервера_ШагЧтения", "ЗагрузкаДокументов", Объект.ШагЧтенияДанных);
	
	Сообщить("Настройки успешно сохранены!", СтатусСообщения.Информация);
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаЗаписатьНастройки(Команда)
	
	СохранитьНастройки_Сервер();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязьССервером()
	
	Результат	  = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Сервер) Тогда
		Сообщить("Сервер не заполнен!", СтатусСообщения.Важное);
		Результат = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Пароль) Тогда
		Сообщить("Пароль не заполнен!", СтатусСообщения.Важное);
		Результат = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ключ) Тогда
		Сообщить("Ключ не заполнен!", СтатусСообщения.Важное);
		Результат = Ложь;
	КонецЕсли;	
	
	Если  Результат = Ложь Тогда
		Возврат Результат;
	КонецЕсли;	

	Результат = Прочитать_Сервер(0, 1, 1, Истина);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура КомандаПроверитьСвязьССервером(Команда)
	
	Результат = ПроверитьСвязьССервером();
	
	Если Результат = Истина Тогда
		Сообщить("Связь с сервером установлена!", СтатусСообщения.Информация);
	Иначе
		Сообщить("Ошибка связи с сервером!", СтатусСообщения.Важное);
	КонецЕсли;	
	
КонецПроцедуры



&НаКлиенте
Процедура СсылкаНажатие(Элемент)

	ОткрытьФорму("ОбщаяФорма.Обозреватель", 
		Новый Структура("АдресСтраницы,Заголовок,ПоказыватьАдреснуюСтроку", "http://priceplan.pro", "Информация", Истина));
	
КонецПроцедуры




//ПРОЦЕДУРИ И ФУНКЦИИ ВЫГРУЗКИ ПЛАТЕЖЕЙ В ПРАЙСПЛАН

&НаСервере
Функция ПривестиКЧислуНомер(Значение)
	
	Результат	= 0;
	НомерСтр	= СокрЛП(Значение);
	НомерСтр	= Прав(НомерСтр, 5);
	
	Попытка
		Результат	= Число(НомерСтр);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ПривестиКЧислуНулл(Значение)
	
	Если Значение = NULL 
		ИЛИ НЕ ЗначениеЗаполнено(Значение) 
		ИЛИ Значение = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Значение;	
	Иначе	
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПривестиКСтрокеНулл(Значение)
	
	Если Значение = NULL 
		ИЛИ НЕ ЗначениеЗаполнено(Значение) 
		ИЛИ Значение = "" Тогда
		Возврат Неопределено;
	Иначе	
		Возврат Значение;
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция ПолучитьУИДСсылки(пСсылка)
	
	Результат		= "";
	Если НЕ ЗначениеЗаполнено(пСсылка) Тогда
		
		Возврат Результат;
	КонецЕсли;	
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника,
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = &Ссылка";
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",	  пСсылка);
	Выборка			= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат	= СокрЛП(Выборка.УникальныйИдентификаторИсточникаСтрокой);	
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПлатежныеДокументы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Организация не заполнена!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаС) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаПо) Тогда
		Сообщить("Период не заполнен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	ТекстЗапроса	=
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
	|	ПоступлениеНаРасчетныйСчет.Дата,
	|	ПоступлениеНаРасчетныйСчет.НомерВходящегоДокумента КАК Номер,
	|	ПоступлениеНаРасчетныйСчет.Контрагент,
	|	ПоступлениеНаРасчетныйСчет.СчетКонтрагента.НомерСчета КАК КонтрагентБанкСчет,
	|	ПоступлениеНаРасчетныйСчет.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанкНазвание,
	|	ПоступлениеНаРасчетныйСчет.СчетКонтрагента.Банк.Код КАК КонтрагентБИК,
	|	ИСТИНА КАК Отметка,
	|	ПоступлениеНаРасчетныйСчет.Контрагент.НаименованиеПолное КАК КонтрагентНазвание,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента,
	|	ЕСТЬNULL(Соотв.УникальныйИдентификаторИсточникаСтрокой, """") КАК КонтрагентИД,
	|	ПоступлениеНаРасчетныйСчет.Контрагент.ИНН,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК Соотв
	|		ПО ПоступлениеНаРасчетныйСчет.Контрагент = Соотв.УникальныйИдентификаторИсточника
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Проведен
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = &ВидОперацииБанк
	|	И ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	"""",
	|	"""",
	|	"""",
	|	ИСТИНА,
	|	ПриходныйКассовыйОрдер.Контрагент.НаименованиеПолное,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ЕСТЬNULL(Соотв.УникальныйИдентификаторИсточникаСтрокой, """"),
	|	ПриходныйКассовыйОрдер.Контрагент.ИНН,
	|	ПриходныйКассовыйОрдер.Приложение
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК Соотв
	|		ПО ПриходныйКассовыйОрдер.Контрагент = Соотв.УникальныйИдентификаторИсточника
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.ВидОперации = &ВидОперацииПКО
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаС И &ДатаПо";
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",				Объект.Организация);
	Запрос.УстановитьПараметр("ВидОперацииБанк",			Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ВидОперацииПКО",				Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ДатаС",						НачалоДня(Объект.ДатаС));
	Запрос.УстановитьПараметр("ДатаПо",						КонецДня(Объект.ДатаПо));
	
	Объект.тчДокументыВыг.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьВыг(Команда)

	ЗаполнитьПлатежныеДокументы();
	
КонецПроцедуры


&НаСервере
Функция СформироватьТаблицуПлатежей() 
	
	Отбор			= Новый Структура("Отметка", Истина);
	НайдСтроки      = Объект.тчДокументыВыг.НайтиСтроки(Отбор);
	Результат		= "";
	//ПлюсСимвол		= "?";
	МассивДанных	= Новый Массив;
	
	ТекущаяОбработка= РеквизитФормыВЗначение("Объект");
	
	ТекИндекс		= 1;
	Для Каждого ТекСтрока Из НайдСтроки Цикл
		
		ДатаПлат		= ПреобразоватьДатуВСтр(ТекСтрока.Документ.Дата);
		
		Клиент_ИД		= ТекСтрока.КонтрагентИД;
		Клиент_Наим		= СокрЛП(ТекСтрока.КонтрагентНазвание);
		Клиент_ИНН		= СокрЛП(ТекСтрока.КонтрагентИНН);
		Клиент_БИК		= СокрЛП(ТекСтрока.КонтрагентБИК);
		Клиент_Банк		= СокрЛП(ТекСтрока.КонтрагентБанкНазвание);
		Клиент_Счет		= СокрЛП(ТекСтрока.КонтрагентБанкСчет);
		
		ТекОрганиз		= ТекСтрока.Документ.Организация;
		ТекСчет			= Неопределено;
		Если ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			ТекСчет		= ТекСтрока.Документ.СчетОрганизации;	
		КонецЕсли;	
		
		Орг_Наим		= СокрЛП(ТекОрганиз.НаименованиеПолное);
		Орг_ИНН			= СокрЛП(ТекОрганиз.ИНН);
		Орг_БИК			= "";
		Орг_Банк		= "";
		Орг_Счет		= "";
		Если НЕ ТекСчет = Неопределено Тогда
			Орг_БИК			= СокрЛП(ТекСчет.Банк.Код);
			Орг_Банк		= СокрЛП(ТекСчет.Банк.Наименование);
			Орг_Счет		= СокрЛП(ТекСчет.НомерСчета);
		КонецЕсли;	
		
		СуммаДок		= Формат(ТекСтрока.СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		ТипДокумента	= СокрЛП(ТекСтрока.Документ.Метаданные().Имя);
		НомерДок		= ПривестиКЧислуНомер(СокрЛП(ТекСтрока.Номер));
		ПлатежИД		= СокрЛП(ТекСтрока.Документ.УникальныйИдентификатор());
		ПлатежИмя		= СокрЛП(ТекСтрока.Документ.ВидОперации);
		НазнПлатежа		= СокрЛП(ТекСтрока.НазначениеПлатежа);
		
		
		СтруктураСтрока	= Новый Структура("type,number,date,payerid,payer,payer_inn,payer_account,payer_bank,payer_bik,recipient,recipient_inn,recipient_account,recipient_bank,recipient_bik,payment_details,total");
		
		СтруктураСтрока.type			= ПривестиКСтрокеНулл(ТипДокумента);
		СтруктураСтрока.number			= ПривестиКЧислуНулл(НомерДок);
		СтруктураСтрока.date			= ПривестиКСтрокеНулл(ДатаПлат);
		СтруктураСтрока.payerid			= ПривестиКЧислуНулл(Клиент_ИД);
		СтруктураСтрока.payer			= ПривестиКСтрокеНулл(Клиент_Наим);
		СтруктураСтрока.payer_inn		= ПривестиКСтрокеНулл(Клиент_ИНН);
		СтруктураСтрока.payer_account	= ПривестиКСтрокеНулл(Клиент_Счет);
		СтруктураСтрока.payer_bank		= ПривестиКСтрокеНулл(Клиент_Банк);
		СтруктураСтрока.payer_bik		= ПривестиКСтрокеНулл(Клиент_БИК);
		
		СтруктураСтрока.recipient		  = ПривестиКСтрокеНулл(Орг_Наим);
		СтруктураСтрока.recipient_inn	  = ПривестиКСтрокеНулл(Орг_ИНН);
		СтруктураСтрока.recipient_account = ПривестиКСтрокеНулл(Орг_Счет);
		СтруктураСтрока.recipient_bank    = ПривестиКСтрокеНулл(Орг_Банк);
		СтруктураСтрока.recipient_bik     = ПривестиКСтрокеНулл(Орг_БИК);
		СтруктураСтрока.payment_details   = ПривестиКСтрокеНулл(НазнПлатежа);
		
		СтруктураСтрока.total             = ТекСтрока.СуммаДокумента;
		
		МассивДанных.Добавить(СтруктураСтрока);
		
	КонецЦикла;

	Возврат МассивДанных;
	
КонецФункции	

&НаСервере
Функция СериализоватьNULL(Знач пСвойство, Знач пЗначение, Знач пДопПараметры, Знач пОтказ) Экспорт
	
	Результат = "null";
	//Если пЗначение = NULL Тогда
	//	Результат =  "null";
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ОтправитьДанныеПлатежей(пВыгруженоКво = 0)

	Сервер			= СокрЛП(Объект.Сервер);
	Апи				= "/api/payment_upload";
	ПараметрыПост	= СформироватьТаблицуПлатежей();
	ТекущаяОбработка= РеквизитФормыВЗначение("Объект");
	
	//ПараметрыJSON	= ТекущаяОбработка.СформироватьСтрокуJSON(ПараметрыПост);
	//ЗаменитьЧто		= """" + "NULL" + """";
	//ПараметрыJSON	= СтрЗаменить(ПараметрыJSON, ЗаменитьЧто, "null"); 
	
	ssl 	= Новый ЗащищенноеСоединениеOpenSSL();
	//Новый HTTPСоединение(<Сервер>, <Порт>, <ИмяПользователя>, <Пароль>, <Прокси>, <ЗащищенноеСоединение>)   
	//HTTP 	= Новый HTTPСоединение(Сервер,,,,,0,ssl);
	HTTP 	= Новый HTTPСоединение(Сервер,,СокрЛП(Объект.Ключ),СокрЛП(Объект.Пароль),,0,ssl);
	
	ФайлЗапроса 		= ПолучитьИмяВременногоФайла();
	
	ЗаписьJSON 			= Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, "UTF-8",, Новый ПараметрыЗаписиJSON(, Символы.Таб,, ЭкранированиеСимволовJSON.СимволыВнеASCII, Истина, Истина, Истина, Истина));
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	//ЗаписатьJSON(ЗаписьJSON, ПараметрыПост, , );
	ЗаписатьJSON(ЗаписьJSON, ПараметрыПост, , "СериализоватьNULL", ЭтаФорма);
	ЗаписьJSON.Закрыть();
	
	Пар 				= Новый ТекстовыйДокумент();
	Пар.Прочитать(ФайлЗапроса, КодировкаТекста.UTF8);
	ТекстПарJSON 		= Пар.ПолучитьТекст();
	
	//ХешСтрока			= "";
	//СтрокаВХеш 			= ТекстПарJSON+СокрЛП(Объект.Ключ);
	//MD5(СтрокаВХеш, ХешСтрока);
	
	//Апи	= Апи + "?user=" + СокрЛП(Объект.Пользователь) + "&token=" + ХешСтрока;
	//Апи	= Апи + "?user=" + СокрЛП(Объект.Пользователь);
	
	//Сообщить(ТекстОтвета);
	//
	//Возврат;
	
	//ЗаписьJSON.УстановитьСтроку(Пар);
	//ЗаписатьJSON(ЗаписьJSON, Значение);
	//СтрJSON = ЗаписьJSON.Закрыть();
	
	//ТекстовыйФайл 		= Новый ЗаписьТекста(ФайлЗапроса, КодировкаТекста.ANSI);
	//ТекстовыйФайл.Закрыть(); 
	//ТекстовыйФайл 		= Новый ЗаписьТекста(ФайлЗапроса, КодировкаТекста.UTF8,, Истина, Символы.ПС);
	//ТекстовыйФайл.ЗаписатьСтроку(ПараметрыJSON);
	//ТекстовыйФайл.Закрыть();	
	
	//Сообщить(ПараметрыJSON);
	//Возврат;
	
	ФайлРезультата 		= ПолучитьИмяВременногоФайла();
	ЗаголовокHTTP 		= Новый Соответствие();
	ЗаголовокHTTP.Вставить("POST /token HTTP/1.0");
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовокHTTP.Вставить("Accept-Language", "ru");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Content-Language", "ru");
	ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Апи, ФайлРезультата, ЗаголовокHTTP);
		//Сообщить("Выгрузка успешно завершена!", СтатусСообщения.Информация);
	Исключение
		Сообщить("Ошибка выполнения запроса:");
		Сообщить("    " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;	
	
	//Ответ 				= Новый ТекстовыйДокумент();
	//Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
	//ТекстОтвета 		= Ответ.ПолучитьТекст();
	
	пВыгруженоКво		= ПараметрыПост.Количество();
	
	ЧтениеJSON			= Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата, "UTF-8"); 
	ТекстОтвета			= ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ТекстОтвета;
	
	//Сообщить(ТекстОтвета);
	//
	//ТекстОтвета			= ТекущаяОбработка.новПрочитатьJSON(ТекстОтвета);
	//Сообщить(ТекстОтвета);
	
КонецФункции	
	
&НаКлиенте
Процедура КомандаОтправитьВыг(Команда)
	
	Перем ВыгруженоКво;
	
	ТекстОтвета	= ОтправитьДанныеПлатежей(ВыгруженоКво);	
	
	Если ТипЗнч(ТекстОтвета) = Тип("Структура") Тогда
		
		Если ТекстОтвета.success = Истина Тогда
			Сообщить("Успешно выгружено " + ВыгруженоКво + " документов!", СтатусСообщения.Информация);	
		Иначе
			Сообщить("Данные не выгружены!", СтатусСообщения.Важное);		
			
			МассивОшибок	= ТекстОтвета.errors;
			Для Каждого СтрокаМасс Из МассивОшибок Цикл
				Если ТипЗнч(СтрокаМасс) = Тип("Структура") Тогда
					Для Каждого СтрокаОшибка Из СтрокаМасс Цикл
						Если НЕ СтрокаОшибка.Ключ = "data" Тогда
							Продолжить;
						КонецЕсли;	
						Сообщить("     Описание ошибки: "  + СтрокаОшибка.Значение, СтатусСообщения.Важное);
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтрагента(пКонтрагент)
	
	//ТекСтрока.КонтрагентИД			=	ПолучитьУИДСсылки(пКонтрагент);
	//ТекСтрока.КонтрагентНазвание	=	пКонтрагент.НаименованиеПолное;
	
КонецПроцедуры	

&НаКлиенте
Процедура тчДокументыВыгКонтрагентПриИзменении(Элемент)
	
	Если Элементы.тчДокументыВыг.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.тчДокументыВыг.ТекущиеДанные.КонтрагентИД				=	ПолучитьУИДСсылки(Элементы.тчДокументыВыг.ТекущиеДанные.Контрагент);
	Элементы.тчДокументыВыг.ТекущиеДанные.КонтрагентНазвание		=	Строка(Элементы.тчДокументыВыг.ТекущиеДанные.Контрагент);
	
КонецПроцедуры


//&НаКлиенте
//Функция ЗаписатьJSON_Встроенная(Значение) Экспорт
//	//
//	//ЗаписьJSON = Новый ЗаписьJSON;
//	//Пар	= Новый ПараметрыЗаписиJSON(,,,ЭкранированиеСимволовJSON.СимволыВнеBMP);
//	////Пар.ЭкранированиеСимволов	=ЭкранированиеСимволовJSON.СимволыВнеBMP;
//	//ЗаписьJSON.УстановитьСтроку(Пар);
//	//ЗаписатьJSON(ЗаписьJSON, Значение);
//	//СтрJSON = ЗаписьJSON.Закрыть();

//	//Возврат  СтрJSON;
//	
//КонецФункции


//&НаКлиенте
//Процедура КомандаТест(Команда)
//	
//	
//	////ТекущаяОбработка= РеквизитФормыВЗначение("Объект");
//	//ТекстОтвета		= ЗаписатьJSON_Встроенная("Проверка.!№;$");
//	//
//	//Сообщить(ТекстОтвета);
//	
//КонецПроцедуры



&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаСправка Тогда
		ТекстHTML = "http://priceplan.pro/1c-help";	
	КонецЕсли;	
КонецПроцедуры






